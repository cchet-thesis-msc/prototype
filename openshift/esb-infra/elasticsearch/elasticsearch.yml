kind: "Template"
apiVersion: "v1"
metadata:
  name: "ElasticSearch"
  annotations:
    openshift.io/display-name: "ElasticSearch"
    description: "ElasticSearch for Graylog"

parameters:
  - name: "APP"
    displayName: "App name"
    description: "The name of the app label"
    required: true

  - name: "SERVICE_NAME"
    displayName: "Service name"
    description: "The name of the related service"
    required: true

  - name: "VERSION"
    displayName: "Version"
    description: "The elasticsearch version"
    required: true

  - name: "GIT_URL"
    displayName: "Git url"
    description: "The http git repository url for building the service"
    required: true

  - name: "GIT_REF"
    displayName: "Git ref"
    description: "The git repository ref for building the service"
    required: true

  - name: "CONTEXT_DIR"
    displayName: "Context Dir"
    description: "The context directory of the git repository for building the service"
    required: true

  - name: "SECRET_GIT"
    displayName: "Secret name for git"
    description: "The http basic auth secret for accessing git "
    required: true

objects:
  - kind: "Service"
    apiVersion: "v1"
    metadata:
      name: "${SERVICE_NAME}"
      labels:
        app: "${APP}"
    spec:
      ports:
        - name: "${SERVICE_NAME}-rest"
          protocol: "TCP"
          port: 9200
          targetPort: 9200
      selector:
        name:  "${SERVICE_NAME}"
      type: "ClusterIP"
      sessionAffinity: "None"

  - kind: "BuildConfig"
    apiVersion: "v1"
    metadata:
      name: "${SERVICE_NAME}"
      labels:
        name: "${SERVICE_NAME}"
        app: "${APP}"
    spec:
      source:
        type: "Git"
        git:
          uri: "${GIT_URL}"
          ref: "${GIT_REF}"
        sourceSecret:
          name: "${SECRET_GIT}"
        contextDir: "${CONTEXT_DIR}"
      strategy:
        type: "Docker"
        dockerStrategy:
          env:
            - name: "BUILD_LOGLEVEL"
              value: "5"
            - name: "VERSION"
              value: "${VERSION}"
      output:
        to:
          kind: "ImageStreamTag"
          name: "${SERVICE_NAME}:latest"
          labels:
            app: "${APP}"
      triggers:
        - type: "ConfigChange"

  - kind: "ImageStream"
    apiVersion: "v1"
    metadata:
      name: "${SERVICE_NAME}"
      labels:
        app: "${APP}"

  - kind: "DeploymentConfig"
    apiVersion: "v1"
    metadata:
      name: "${SERVICE_NAME}"
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        app: "${APP}"
    spec:
      strategy:
        type: "Recreate"
      replicas: "1"
      selector:
        name: "${SERVICE_NAME}"
      triggers:
        - type: "ConfigChange"
        - type: "ImageChange"
          imageChangeParams:
            automatic: true
            containerNames:
              - "${SERVICE_NAME}"
            from:
              kind: "ImageStreamTag"
              name: "${SERVICE_NAME}:latest"
      template:
        metadata:
          labels:
            name: "${SERVICE_NAME}"
        spec:
          containers:
            - name: "${SERVICE_NAME}"
              image: " "
              imagePullPolicy: Always
              ports:
                - containerPort: 9200
                  protocol: TCP
              readinessProbe:
                successThreshold: 1
                failureThreshold: 5
                timeoutSeconds: 10
                initialDelaySeconds: 60
                periodSeconds: 10
                httpGet:
                  path: /_cat/health?v
                  port: 9200
                  scheme: HTTP
                  httpHeaders:
                     - name: Authorization
                       # elastic:changeme
                       value: "Basic ZWxhc3RpYzpjaGFuZ2VtZQ=="
              livenessProbe:
                successThreshold: 1
                failureThreshold: 2
                timeoutSeconds: 10
                initialDelaySeconds: 60
                periodSeconds: 10
                httpGet:
                  path: /_cat/health?v
                  port: 9200
                  scheme: HTTP
                  httpHeaders:
                    - name: Authorization
                      # elastic:changeme
                      value: "Basic ZWxhc3RpYzpjaGFuZ2VtZQ=="
              terminationMessagePath: "/dev/termination.log"
              capabilities:
                securityContext:
                  capabilities:
                    privileged: false
