swarm:
  deployment: ${project.build.finalName}.war
  http:
    port: 8080
  contex:
    path: "/"
  ee:
    jboss-descriptor-property-replacement: true
  logging:
    pattern-formatters:
      DEFAULT_LOG_PATTERN:
        pattern: "%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p (%t) [%C{2}] trace.id=%X{trace.id} | trace.group=%X{trace.group} - %m%n"
    console-handlers:
      CONSOLE:
        named-formatter: DEFAULT_LOG_PATTERN
---
DB_ADDR: "localhost"
DB_PORT: "5432"
DB_DIALECT: "org.hibernate.dialect.PostgreSQLDialect"
DB_DRIVER: "org.postgresql.Driver"
DB_USER: "postgres"
DB_PASSWORD: "postgres"
DB_SCHEMA: "public"
DB_DATABASE: "postgres"

project:
  stage: dev
swarm:
  http:
    port: 8082
  management:
    http:
      port: 9992
  logging:
    root-logger:
      level: INFO
      handlers:
        - CONSOLE
        - GELF-HTTP
    loggers:
      org.keycloak:
        level: TRACE
        handlers:
          - CONSOLE
          - GELF-HTTP
  datasources:
    data-sources:
      DS:
        driver-name: postgresql
        connection-url: jdbc:postgresql://${DB_ADDR}:${DB_PORT}/${DB_DATABASE}
        jndi-name: java:/DS
        user-name: ${DB_USER}
        password: ${DB_PASSWORD}
---
DB_DIALECT: org.hibernate.dialect.H2Dialect
DB_DRIVER: org.h2.Driver
DB_USER: "user"
DB_PASSWORD: "password"
DB_SCHEMA: "public"
DB_DATABASE: "postgres"

project:
  stage: test
swarm:
  logging: INFO
  datasources:
    data-sources:
      DS:
        driver-name: h2
        connection-url: jdbc:h2:mem:DEMO;INIT=CREATE SCHEMA IF NOT EXISTS DEMO
        jndi-name: java:/DS
        user-name: ${DB_USER}
        password: ${DB_PASSWORD}
---
# Need to collect env vars as JAVA Opts with these variables
# data-source#connection-url can resolve Java Opts but not env vars !!
DB_DIALECT: "org.hibernate.dialect.PostgreSQLDialect"
DB_DRIVER: "org.postgresql.Driver"
DB_ADDR: "${env.DB_ADDR}"
DB_PORT: "${env.DB_PORT}"
DB_DATABASE: "${env.DB_DATABASE}"
DB_SCHEMA: "${env.DB_SCHEMA}"
DB_USER: "${env.DB_USER}"
DB_PASSWORD: "${env.DB_PASSWORD}"
# Fraction does not support this parameter
JAEGER_ENDPOINT: "${env.JAEGER_HOST}"
GRAYLOG_HOST: "${env.GRAYLOG_HOST}"

project:
  stage: openshift
swarm:
  jaeger:
    service-name: "${project.build.finalName}"
    reporter-log-spans: true
    reporter-flush-interval: 100
    sampler-type: const
    sampler-parameter: 1
  logging:
    file-handlers:
    custom-handlers:
      GELF-HTTP:
        attribute-class: biz.paluch.logging.gelf.wildfly.WildFlyGelfLogHandler
        module: biz.paluch.logging
        properties:
          host: ${GRAYLOG_HOST}
          extractStackTrace: true
          includeFullMdc: true
          maximumMessageSize: 1048576
    root-logger:
      level: WARN
      handlers:
        - CONSOLE
        - GELF-HTTP
    loggers:
      com.gepardec:
        level: INFO
        handlers:
          - CONSOLE
          - GELF-HTTP
  keycloak:
    json:
      path: ${oc.secret-service-integration-keycloak.dir}/keycloak.json
  deployment:
    ${project.build.finalName}.war:
      web:
        login-config:
          auth-method: KEYCLOAK
        security-constraints:
          - url-pattern: /rest-api/customer/*
            roles: [consumer]
          - url-pattern: /rest-api/order/*
            roles: [consumer]
          - url-pattern: /rest-api/admin/*
            roles: [consumer]
  microprofile:
    config:
      config-sources:
        db.secrets:
          dir: ${oc.secret-service-integration.dir}
  datasources:
    data-sources:
      DS:
        driver-name: postgresql
        connection-url: jdbc:postgresql://${DB_ADDR}:${DB_PORT}/${DB_DATABASE}
        jndi-name: java:/DS
        user-name: ${DB_USER}
        password: ${DB_PASSWORD}
